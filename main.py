import json
import os
import gc

from fastapi import FastAPI, Request, Depends
from sqlalchemy.ext.asyncio import AsyncSession

from db.settings import get_db
from utils.added_funcs import add_note_to_deal, is_note_processed, save_processed_note
from utils.find_funcs import find_lead_id
from utils.generate_funcs import transcribe_to_dialog
from utils.get_funcs import download_audio_async

app = FastAPI()

@app.post("/webhooks/voice")
async def voice_webhook(request: Request, db: AsyncSession = Depends(get_db)):
    form_data = await request.form()

    if "leads[note][0][note][note_type]" in form_data:
        lead_id = find_lead_id(form_data)
        print('‚úÖ‚úÖ‚úÖ', lead_id, flush=True)
        note_type = form_data["leads[note][0][note][note_type]"]
        note_id = form_data["leads[note][0][note][id]"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–≤–æ–Ω–æ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if await is_note_processed(db, note_id):
            print(f"‚è© –ü—Ä–æ–ø—É—Å–∫: –∑–≤–æ–Ω–æ–∫ —Å note_id={note_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", flush=True)
            return {"status": "skipped", "message": "Note already processed"}

        if note_type in ["10", "11"]:
            print('üìû –î–∞–Ω–Ω—ã–µ –æ—Ç AMOCrm (–∑–≤–æ–Ω–∫–∏)', form_data, flush=True)
            text = form_data["leads[note][0][note][text]"]
            try:
                text_data = json.loads(text)
                audio_url = text_data.get("LINK")
                if audio_url:
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    output_path = "downloaded_call.mp3"
                    if await download_audio_async(audio_url, output_path):
                        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ —Å–∞–º–º–∞—Ä–∏
                        dialog_text, summary = await transcribe_to_dialog(output_path)
                        dialog_text = "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞\n" + dialog_text
                        summary = "–ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞\n" + summary

                        print('üíÄüíÄüíÄ', dialog_text, summary, flush=True)
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
                        if len(dialog_text) < 19900:#amocrm –Ω–µ —Ö–∞–≤–∞–µ—Ç –±–æ–ª—å—à–µ 20000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏
                            if await add_note_to_deal(lead_id, dialog_text) and await add_note_to_deal(lead_id, summary):
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º note_id –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                await save_processed_note(db, note_id)
                            else:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è note_id={note_id}", flush=True)
                        else:
                            if await add_note_to_deal(lead_id, summary):
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º note_id –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                                await save_processed_note(db, note_id)
                            else:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è note_id={note_id}", flush=True)

                        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        if os.path.exists(output_path):
                            os.remove(output_path)
                            gc.collect()
                            print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {output_path} –∏ –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞", flush=True)
            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –≤ –ø–æ–ª–µ text", flush=True)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–æ–Ω–∫–∞: {e}", flush=True)

    return {"status": "ok"}







